1. Figure out what features to include for X
2. Figure out what we are predicting i.e. what will Y contain (tomorrows close, tomorrows open??? etc.)
3. Figure out best regression model
  - Gaussian RBF?
  - L2 regularised regression?
  - consider what we are trying to determine, robustness to outliers?
4. Figure out a buy/sell strategy
  - for example a simple one would be buy whenever we predict tomorrow's open/close to be higher by certain %


Features:
1. Todays open
2. Prev close
3. Prev volume
4. 15 day ewm
5. prev Open to prev close ratio (% change per day)
6. prev close to to open ratio (% change overnight)
7. % change of volume

Notes:
Current model uses the above features to predict the adj close of the next X=5 number of days
Regression model used is the L2-regularised least squares with the kernel trick


Read Will Lins beida notes

Work with kelvin night of 9th feb 2020
# holding = False
# for i in range(30,200):
#     if (self.ma30[i] < self.ma10[i] and holding == False):
#         holding = True
#         bought_at = self.df_stock['Adj Close'][i]
#         bought_date = self.df_stock['Date'][i]
#     if (self.ma30[i] > self.ma10[i] and holding == True):
#         holding = False
#         sold_at = self.df_stock['Adj Close'][i]
#         sold_date = self.df_stock['Date'][i]
#         self.returns = self.returns.append({'Bought Date' : bought_date,
# 						'Sold Date' : sold_date,
# 						'% return' :(sold_at - bought_at)/bought_at}, ignore_index=True)
#     if holding:
#         curr_return = (self.df_stock['Adj Close'][i] - bought_at)/bought_at
#         if (curr_return >= 0.025 or curr_return <= -0.025):
#             holding = False
#             sold_at = self.df_stock['Adj Close'][i]
#             sold_date = self.df_stock['Date'][i]
#             self.returns = self.returns.append({'Bought Date' : bought_date,
# 							'Sold Date' : sold_date,
# 							'% return' :(sold_at - bought_at)/bought_at}, ignore_index=True)


Moving Average Simulation
- Vectorise signals in +1 or -1 (this will be yhat)
  - where +1 represents upward trend for the next 5 days
  - -1 represents downward trend in the next 5 days
    - Calculate trend based on average open-close return prices
      - signal = sign((close - open)/open)
- Xhat will contain:
  - diff_ma_x_y = mAvgX- mAvegY (do this for 30,20,10,5)
    - (30-20), (30-10), (30-5), (20-10), (20-5), (10-5) -> could just take the sign of them as they represent cross over points
    - This won't work as we need to obtain the crossover point -> maybe have another column for the previous sign
- Notes on sim
  - Can't buy/sell at open of that day since we are using the open
    - maybe buy/sell at the median of the high and close price
  - more data the worse it does??!?!?!??!?! overfitting???!?!?!?! what is going on?
